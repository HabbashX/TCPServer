package com.habbashx.tcpserver.scheduler;


/**
 * Represents an abstract task that can be scheduled to run at a later time or
 * periodically using a {@link TaskScheduler}. This class provides methods to
 * schedule tasks for both synchronous and asynchronous execution, with support
 * for delayed or periodic scheduling.
 *
 * Implementations of this abstract class must define the logic for the task
 * within the {@code run()} method from {@link Runnable}.
 */
public abstract class TaskRunnable implements Runnable {

    /**
     * Represents the unique identifier for a scheduled task in the context of a
     * TaskRunnable instance. This identifier is used to track and manage the task
     * during its lifecycle, including scheduling, executing, and canceling.
     *
     * By default, the taskId is initialized to -1, indicating that the task has
     * not yet been assigned a valid ID or scheduled. Once the task is scheduled
     * using appropriate methods and linked to a TaskScheduler, the taskId is
     * updated with the corresponding unique identifier generated by the scheduler.
     */
    private int taskId = -1;

    /**
     * A TaskScheduler instance used to manage and schedule the execution of tasks.
     * It provides functionality for scheduling tasks to run after a delay,
     * at fixed intervals, or at specific times. This variable is intended to
     * coordinate and organize the execution flow of asynchronous or timed operations.
     */
    private final TaskScheduler scheduler = new TaskScheduler();

    /**
     * Schedules this task to run once after a specified delay.
     *
     * @param delayInTicks Delay before running (in ticks, 1 tick = 50ms).
     * @return This TaskRunnable instance, for chaining.
     */
    public synchronized TaskRunnable runTaskLater(long delayInTicks) {
        taskId = scheduler.runTaskLater(this, delayInTicks);
        return this;
    }

    /**
     * Schedules this task to run asynchronously once after a specified delay.
     *
     * @param delayInTicks Delay before running (in ticks, 1 tick = 50ms).
     * @return This TaskRunnable instance, for chaining.
     */
    public synchronized TaskRunnable runTaskAsyncLater(long delayInTicks) {
        taskId = scheduler.runTaskAsyncLater(this, delayInTicks);
        return this;
    }

    /**
     * Schedules this task to run repeatedly with the given initial delay and interval.
     *
     * @param delayInTicks Initial delay before the task starts (in ticks, 1 tick = 50ms).
     * @param periodInTicks Interval between each execution (in ticks).
     * @return This TaskRunnable instance, for chaining.
     */
    public synchronized TaskRunnable runTaskTimer(long delayInTicks, long periodInTicks) {
        taskId = scheduler.runTaskTimer(this, delayInTicks, periodInTicks);
        return this;
    }

    /**
     * Schedules this task to run asynchronously repeatedly with the given initial delay and interval.
     *
     * @param delayInTicks Initial delay before the task starts (in ticks, 1 tick = 50ms).
     * @param periodInTicks Interval between each execution (in ticks).
     * @return This TaskRunnable instance, for chaining.
     */
    public synchronized TaskRunnable runTaskAsyncTimer(long delayInTicks, long periodInTicks) {
        taskId = scheduler.runTaskAsyncTimer(this, delayInTicks, periodInTicks);
        return this;
    }

    /**
     * Cancels this task if it is currently scheduled.
     */
    public synchronized void cancel() {
        if (taskId != -1) {
            scheduler.cancelTask(taskId); // Cancel task in the scheduler
            taskId = -1; // Reset task ID
        }
    }

    /**
     * Retrieves the TaskScheduler associated with this TaskRunnable instance.
     * The TaskScheduler is responsible for managing task scheduling operations,
     * including delayed and recurring tasks.
     *
     * @return The TaskScheduler object linked to this TaskRunnable, used for scheduling tasks.
     */
    public TaskScheduler getScheduler() {
        return scheduler;
    }
}